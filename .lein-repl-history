(main)
(require 'core)
(require 'fat-jar.core)
(main)
cli-options
main
fat-jar.core.main
fat-jar.core.-main
fat-jar.core/main
#'fat-jar.core/main
#'core/main
(def s #'core/main)
(def s #'core/-main)
(def s #'fat-jar.core/-main)
s
(s)
(s -v)
(s "-v")
#'fat-jar.core/-main "-v"
(#'fat-jar.core/-main "-v")
(not-empty [])
(not-empty [1])
(not (empty? [1]))
(not (empty? []))
(require 'fat-jar.core)
(#'fat-jar.core/-main "-v")
(#'fat-jar.core/-main "-")
(#'fat-jar.core/-main)
(require 'fat-jar.core)
(#'fat-jar.core/-main)
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main)
(#'fat-jar.core/-main "a")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "a")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "a")
g d
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "a")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "a")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "a")
(#'fat-jar.core/-main)
(#'fat-jar.core/-main -y)
(#'fat-jar.core/-main "-y")
(#'fat-jar.core/-main "-h")
(#'fat-jar.core/-main "-o .")
(#'fat-jar.core/-main "-o=.")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-o=.")
(#'fat-jar.core/-main "-o=. -t=s")
(#'fat-jar.core/-main "-o='.' -t=s")
(#'fat-jar.core/-main "-o=\".\"")
(#'fat-jar.core/-main "-o=.")
(#'fat-jar.core/-main "-o= .")
(#'fat-jar.core/-main "-o= ." "-t=t1")
(#'fat-jar.core/-main "-o= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main)
(identity nil)
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-o= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-o= .")
(#'fat-jar.core/-main)
(#'fat-jar.core/-main "-o= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(#'fat-jar.core/-main)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(require 'fat-jar.core :reload)
(#'fat-jar.core/-main "-t= .")
(:use clj-pdf.core)
(require 'clj-pdf.core)
(require '[clojurewerkz.propertied.properties :as p])
(p/load-from {"a key" "a value"})
(p/load-from {"hour" {:v "a value" :m identity}})
(p/load-from {"hour" {:v "a value"}})
(p/load-from {"hour" '{:v "a value"}})
(p/load-from {"hour" "{:v \"a value\"}}")
(p/load-from {"hour" "{:v \"a value\"}"})
(load-file "./mapper.clj")
(:hour (load-file "./mapper.clj"))
(load-file "./mapper.clj")
(:mapping hour
(mapping :hour)
(mapping "hour")
(:v (mapping "hour"))
(mapping "hour")
("hour" mapping)
(load-file "./mapper.clj")
(:v (mapping "hour"))
(:v (mapping :hour))
(:c (mapping :hour) "b")
(:c (mapping :hour) identity)
(:m (mapping :hour) identity)
(load-file "./mapper.clj")
(:m (mapping :hour) identity)
(:m (mapping :normal) identity)
(load-file "./mapper.clj")
(#'fat-jar.core/mapping)
(def mapping #'fat-jar.core/mapping)
mapping
(def mapping 'fat-jar.core/mapping)
mapping
(load-file "./mapper.clj")
(eval "mapping")
(eval "#'fat-jar.core/mapping")
          (read-string (slurp "./mapper.clj"))
(eval          (read-string (slurp "./mapper.clj")))
(read-string (slurp "./mapper.clj"))
(eval          (read-string (slurp "./mapper.clj")))
(read-string (slurp "./mapper.clj"))
(eval (read-string (slurp "./mapper.clj")))
(def e2 (eval (read-string (slurp "./mapper.clj"))))
e2
(read-string (slurp "./mapper.clj"))
(slurp "./mapper.clj")
(read-string (slurp "./mapper.clj"))
(slurp "./mapper.clj")
(read-string (slurp "./mapper.clj"))
(def e3 (eval (read-string (slurp "./mapper.clj"))))
e3
(require '[clojure.tools.reader.edn :as edn])
(edn/read [{:v "John2" :m identity}
])
(edn/read (slurp "./people.edn"))
(slurp "./people.edn")
(edn/read (slurp "./people.edn"))
(edn/read-string (slurp "./people.edn"))
(eval (edn/read-string (slurp "./people.edn")))
(edn/read-string (slurp "./people.edn"))
(nth 0 (edn/read-string (slurp "./people.edn")))
(nth (edn/read-string (slurp "./people.edn")) 0)
(nth (nth (edn/read-string (slurp "./people.edn")) 0) 0)
(require '(clj-json [core :as json]))
(import '(java.io StringReader BufferedReader))
(json/parsed-seq
  (BufferedReader. (StringReader. "{\"foo\":\"bar\"}{\"biz\":\"bat\"}")))
  (BufferedReader. (StringReader. "{\"foo\":{\"bar\"}}{\"biz\":\"bat\"}")))
(json/parsed-seq  (BufferedReader. (StringReader. "{\"foo\":{\"bar\"}}{\"biz\":\"bat\"}")))
(json/parsed-seq  (BufferedReader. (StringReader. "{\"foo\":\"bar\" {\"biz\":\"bat\"}}")))
(json/parsed-seq  (BufferedReader. (StringReader. "{\"foo\":\"bar\", {\"biz\":\"bat\"}}")))
(json/parsed-seq  (BufferedReader. (StringReader. "{\"foo\":\"bar\", \"a\":{\"biz\":\"bat\"}}")))
(def jso (json/parsed-seq  (BufferedReader. (StringReader. "{\"foo\":\"bar\", \"a\":{\"biz\":\"bat\"}}"))))
(:a (:biz jso))
(:biz (:a jso))
((jso "a") "biz")
(jso "a")
(first (jso "a"))
((first jso) "a"))
((first jso) "a")
(((first jso) "a") "biz")
(def jso (first jso))
jso
(reduce jso #(% %2) ["a" "biz"])
(reduce jso #(%2 %) ["a" "biz"])
(reduce #(%2 %) jso ["a" "biz"])
(reduce #(% %2) jso ["a" "biz"])
